1.Что такое сериализация/дессериализация?
Сериализация объекта - возможность “сохранить” (записать) текущее состояние объекта в байты. 
Десериализация - перевод из байтов обратно в объект. Объект, который может сериализоваться должен быть помечен маркерным интерфейсом (который не требует реализации никаких методов).

2.Какая последовательность работы с потоком?
1)Открытие потока для чтения из файла, для записи в файл и т.п.
2)Чтение данных(если поток входной)
3)Запись данных(если поток выходной)
4)Закрытие потока для освобождения ресурсов и предотвращения утечки памяти.
5)Обработка ошибок(рекомендуется использовать блоки try-catch или throws).

3.Какие виды потоков существуют?
Потоки ввода вывода - Streams, которые в свою очередь разделяются на потоки
для побайтового чтения и посимвольного
Многопоточность (Thread - класс, Runnable - интерфейс)
Потоки консоли (System.in, System.out, System.err)
Потоки для работы с ZIP архивами: ZipInputStream, ZipOutputStream
Потоки символов (Character Streams): для работы с символами.
Потоки объектов (Object Streams): для сериализации объектов.
Потоки файлов (File Streams): используются для работы с файлами на диске. 
Потоки буферизации (Buffered Streams): обеспечивают более эффективную работу с данными, добавляя буферизацию к обычным потокам.
Потоки-демоны (Daemon Threads): используются для выполнения задач, которые не являются критически важными и могут быть прерваны без вреда для приложения.

4. Чем отличается IO от NIO?
Java IO является потокоориентированным, JAVA NIO буфер-ориентированным.
То есть в Java IO операции чтения / записи осуществляются поочередно.
В Java NIO используется считывание / запись в буфер
-IO менее эффективен при работе с большим количеством соединений, чем NIO.
-При использовании IO, операции ввода/вывода блокируют поток выполнения до завершения операции. Это означает, что поток будет ожидать, пока данные не будут доступны или записаны.
-NIO предоставляет неблокирующие операции ввода/вывода с использованием каналов и селекторов. Это позволяет одному потоку обрабатывать несколько соединений.



